name: vmware-esxi
pipeline:
  - name: parsed_event
    external:
      # All patterns have been tested with the log messages.
      # Each pattern have its own test in the test folder that have the
      # - same name as pattern
      # - the same name as group of patterns
      name: grok.match
      properties:
        input_field: "original.message"
        output_field: result
        pattern: '%{EVENT_LOG_SSH_AUTH}|%{PROCESS_LOG_SSH_AUTH}|%{PROCESS_LOG_SSH_PASSWORD}|%{AUTH_CONNECTION_EVENT}|%{AUTH_CONNECTION_DISCONNECTED}|%{AUTH_CONNECTION_RECEIVE_DISCONNECTED}|%{AUTH_SESSION_EVENT}|%{PROCESS_LOG_AUTH_USER}|%{PROCESS_LOG_CHANGE_USER}|%{AUTH_PUBLIC_KEY}|%{NETWORK_SOURCE}|%{NETWORK_HOSTNAME}|%{PROCESS_COMMAND}|%{PROCESS_COMMAND_USER_WITH_PID}|%{PROCESS_COMMAND_USER_WITHOUT_PID}|%{VARIOUS_FILE_ACTION}|%{VARIOUS_KEY_REASON}|%{VARIOUS_SERIAL_NUMBER}|%{VARIOUS_DEVICE_OUTCOME_REASON}|%{VARIOUS_REASON_1}|%{VARIOUS_REASON_2}|%{DEFAULT_EVENT_LOG}|%{DEFAULT_PROCESS_LOG}|%{DEFAULT_PROCESS_LOG_WITH_ADDITIONAL_INFO}'
        custom_patterns:
          ## Freestyle patterns to be used for messages that contains connection event information
          AUTH_CONNECTION_EVENT: '^(?:\s*)(?<connection>Connection|connection) %{WORD:connection_action} by %{WORD} user %{WORD:username} (?:%{IPV6:ip_address}|%{IPV4:ip_address}) port %{NUMBER:port}%{GREEDYDATA}?'
          AUTH_CONNECTION_DISCONNECTED: '^(?:\s*)%{DATA:connection_action} from user %{WORD:username} (?:%{IPV6:ip_address}|%{IPV4:ip_address}) port %{NUMBER:port}?'
          AUTH_CONNECTION_RECEIVE_DISCONNECTED: '^(?:\s*)%{DATA} from (?:%{IPV6:ip_address}|%{IPV4:ip_address}) port %{NUMBER:port}\:%{NUMBER}\: %{WORD:connection_action} by %{WORD}?'

          ## Freestyle patterns to be used for messages that contains session event information
          AUTH_SESSION_EVENT: '^(?:\s*)%{GREEDYDATA}\: (?<session>session|Session) %{WORD:session_action} for user %{WORD:username}%{DATA}?'

          ## Freestyle patterns to be used for messages that contains public key acception information
          AUTH_PUBLIC_KEY: '^(?:\s*)%{WORD:publickey_action} (?<publickey>publickey|Publickey) for %{WORD:username} from (?:%{IPV6:ip_address}|%{IPV4:ip_address}) port %{NUMBER:port}%{DATA}?'

          ## Freestyle patterns to be used for messages that contains network source information
          NETWORK_SOURCE: '^(?:\s*)(?<connection>Connection|connection) from (?:%{IPV6:ip_address}|%{IPV4:ip_address}) port %{NUMBER:port}%{DATA}?'

          ## Freestyle patterns to be used for messages that contains network hostname information
          NETWORK_HOSTNAME: '^(?:\s*)%{WORD} on %{DATA:connection_source} to (?:%{IPV6:ip_address}|%{IPV4:ip_address}) port %{NUMBER:port}%{DATA}?'

          ## Freestyle patterns to be used for messages that contains command and user
          PROCESS_COMMAND: '^(?:\s*)(?<process_keyword>Executing) %{GREEDYDATA:command}?'
          PROCESS_COMMAND_USER_WITH_PID: '^(?:\s*)USER %{WORD:username} pid %{NUMBER:pid} (?<process_keyword>cmd) %{GREEDYDATA:command}?'
          PROCESS_COMMAND_USER_WITHOUT_PID: '^(?:\s*)User (?:.{1})%{WORD:username}(?:.{1}) running (?<process_keyword>command) %{GREEDYDATA:command}?'

          ## Freestyle patterns to work with filename
          VARIOUS_FILE_ACTION: '^(?:\s*)%{WORD:reason} (?<filename>([\w\/]*?)([\w\.]*)\.(\w*))?'

          ## Freestyle patterns to work with key and reason
          VARIOUS_KEY_REASON: '^(?:\s*)%{DATA} key (?:ID|id|Id) %{DATA:key_id} to %{WORD:reason}?'

          ## Freestyle patterns to get device, outcome and reason
          VARIOUS_DEVICE_OUTCOME_REASON: '^(?:\s*)%{WORD:event_type} %{DATA:server_name}\[%{DATA:server_id}\] \[%{DATA}\] %{DATA} %{WORD:outcome} with %{GREEDYDATA:reason}?'

          ## Freestyle patterns to get serial number
          VARIOUS_SERIAL_NUMBER: '^(?:\s*)%{DATA}(?:serial|SERIAL|Serial) %{WORD} is %{NUMBER:serial_number}?'

          ## Freestyle patterns to get reason
          VARIOUS_REASON_1: '^(?:\s*)%{WORD:action_source} %{DATA} \(%{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA} %{DATA}\) %{GREEDYDATA:message}?'
          VARIOUS_REASON_2: '^(?:\s*)%{WORD}:%{NUMBER}\)%{WORD:event_type}: %{GREEDYDATA:message}?'

          ## This is log pattern to work with ssh events. Based on `DEFAULT_EVENT_LOG`
          ## Example of log:
          ###  [GenericCorrelator] 3087878318715us: [vob.user.ssh.session.opened] SSH session was opened for 'root@1.2.3.4'.
          ## Fields output:
          #  "correlator_name": "GenericCorrelator"
          #  "process": "vob.user.ssh.session.opened"
          #  "ssh": "SSH"
          #  "session": "session"
          #  "reason": "opened"
          #  "username": "root"
          #  "ip_address": "1.2.3.4"
          EVENT_LOG_SSH_AUTH: '^(?:\s*)\[%{PROG:correlator_name}\] %{WORD}: \[%{PROG:process}\] (?<ssh>SSH|ssh) (?<session>session) was %{WORD:reason} for (?:.{1})%{DATA:username}@(?:%{IPV6:ip_address}|%{IPV4:ip_address})%{GREEDYDATA}?'

          ## This is log pattern to work with ssh process. Based on `DEFAULT_PROCESS_LOG_WITH_ADDITIONAL_INFO`
          ## Example of log:
          ###  error hostd[2099655] [Originator@6876 sub=Vimsvc.ha-eventmgr] Event 974676 : SSH session was closed for 'root@1.2.3.4'.
          ## Fields output:
          # "log_lvl": "error"
          # "process": "hostd"
          # "pid": 2099655
          # "ssh": "SSH"
          # "session": "session"
          # "reason": "closed"
          # "username": "root"
          # "ip_address": "1.2.3.4"
          PROCESS_LOG_SSH_AUTH: '^(?:\s*)(?:%{WORD:log_lvl}) %{DATA:process}\[%{NUMBER:pid}\] \[%{WORD}\@%{NUMBER} %{DATA}\] Event %{NUMBER} : (?<ssh>SSH|ssh) (?<session>session) was %{WORD:reason} for (?:.{1})%{DATA:username}@(?:%{IPV6:ip_address}|%{IPV4:ip_address})%{GREEDYDATA}?'

          ## This is log pattern to work with password auth process. Based on `DEFAULT_PROCESS_LOG_WITH_ADDITIONAL_INFO`
          ## Example of log:
          ###  info hostd[2099656] [Originator@6876 sub=Default opID=esxcli-76-ecbf] Accepted password for user root from 127.0.0.1
          ## Fields output:
          # "log_lvl": "info"
          # "process": "hostd"
          # "pid": 2099656
          # "password_action": "Accepted"
          # "password": "password"
          # "username": "root"
          # "ip_address": "127.0.0.1"
          PROCESS_LOG_SSH_PASSWORD: '^(?:\s*)(?:%{WORD:log_lvl}) %{DATA:process}\[%{NUMBER:pid}\] \[%{WORD}\@%{NUMBER} %{DATA}\] %{WORD:password_action} (?<password>password) for user %{WORD:username} from (?:%{IPV6:ip_address}|%{IPV4:ip_address})%{GREEDYDATA}?'

          ## This is log pattern to work with auth user process. Based on `DEFAULT_PROCESS_LOG_WITH_ADDITIONAL_INFO`
          ## Example of log:
          ###  info hostd[2099656] [Originator@6876 sub=Vimsvc opID=esxcli-a5-20ae] [Auth]: User root
          ## Fields output:
          # "log_lvl": "info"
          # "process": "hostd"
          # "pid": 2099656
          # "auth": "Auth"
          # "username": "root"
          PROCESS_LOG_AUTH_USER: '^(?:\s*)(?:%{WORD:log_lvl}) %{DATA:process}\[%{NUMBER:pid}\] \[%{WORD}\@%{NUMBER} %{DATA}\] \[%{WORD:auth}\]\: User %{WORD:username}?'

          ## This is log pattern to work with change user process. Based on `DEFAULT_PROCESS_LOG_WITH_ADDITIONAL_INFO`
          ## Example of log:
          ### info hostd[2099656] [Originator@6876 sub=Vimsvc.ha-eventmgr opID=esxcli-76-ecbf] Event 975279 : User root@127.0.0.1 logged in as pyvmomi Python/3.8.13 (VMkernel; 7.0.3; x86_64)
          ## Fields output:
          # "log_lvl": "info"
          # "process": "hostd"
          # "pid": 2099656
          # "source_username": "root"
          # "ip_address": "127.0.0.1"
          # "username": "pyvmomi"
          # "user_agent": " Python/3.8.13 (VMkernel; 7.0.3; x86_64)"  <!NOTE: This field is optional>
          PROCESS_LOG_CHANGE_USER: '^(?:\s*)(?:%{WORD:log_lvl}) %{DATA:process}\[%{NUMBER:pid}\] \[%{WORD}\@%{NUMBER} %{DATA}\] %{WORD} %{NUMBER} : User %{USERNAME:source_username}@(?:%{IPV6:ip_address}|%{IPV4:ip_address}) %{DATA} as %{WORD:username}%{GREEDYDATA:user_agent}?'

          ## This is default log message pattern that should be used to get log message from events
          ## Example of log:
          ### [iscsiCorrelator] 3087813295957us: [vob.iscsi.connection.stopped] iScsi connection 0 stopped for vmhba64:C0:T3
          DEFAULT_EVENT_LOG: '^(?:\s*)\[%{PROG:correlator_name}\] %{WORD}: \[%{PROG:process}\] %{GREEDYDATA:message}?'

          ## This is default log message pattern that should be used to get log message
          ## Example of log:
          ### info hostd[2099655] [Originator@6876 sub=Vimsvc.ha-eventmgr] <LOG_MSG>
          DEFAULT_PROCESS_LOG: '^(?:\s*)(?:%{WORD:log_lvl}) %{DATA:process}\[%{NUMBER:pid}\] \[%{WORD}\@%{NUMBER}\] %{GREEDYDATA:message}?'

          ## Difference between this one and previous is that meta info can contain various info like `user=<username>`, `Req <Req id>`, `opID=<operation id>` and so on
          ## Example of log:
          ### info hostd[2099655] [Originator@6876 sub=Vimsvc.ha-eventmgr opID=233816e0 user=vpxuser Req 06028] <LOG_MSG>
          DEFAULT_PROCESS_LOG_WITH_ADDITIONAL_INFO: '^(?:\s*)(?:%{WORD:log_lvl}) %{DATA:process}\[%{NUMBER:pid}\] \[%{WORD}\@%{NUMBER} %{DATA}\] %{GREEDYDATA:message}?'

  - name: set_common_fields
  - name: set_additional_fields
  - name: set_event_reason
  - name: set_event_category
  - name: set_event_type

stages:
  set_common_fields:
    actions:
      # Default fields with predefined values
      - set:
          event.kind: 'event'
          observer.vendor: 'VMware'
          observer.product: 'ESXi'

  set_additional_fields:
    actions:
      # Fields by definition that we get from messages
      - set:
          ecs.user.name: '{{parsed_event.result.username}}'
          ecs.source.ip: '{{parsed_event.result.ip_address}}'
          ecs.source.port: '{{parsed_event.result.port}}'
          ecs.source.user.name: '{{parsed_event.result.source_username}}'
          ecs.user_agent.original: '{{parsed_event.result.user_agent | trim}}'
          file.name: '{{parsed_event.result.filename}}'
          wmware.esxi.key.id: '{{parsed_event.result.key_id | trim}}'
          wmware.esxi.event.serial_number: '{{parsed_event.result.serial_number}}'
          host.name: '{{parsed_event.result.server_name}}'
          event.outcome: '{{parsed_event.result.outcome}}'

      # It is necessary to postprocess the command line because it might contain `'` at the beginning and/or at the end
      - set:
          ecs.process.command_line: >
           {%- if parsed_event.result.command.startswith("'") and parsed_event.result.command.endswith("'"): -%}
           {{ parsed_event.result.command[1:-1] }}
           {%- elif parsed_event.result.command.startswith("'"): -%}
           {{ parsed_event.result.command[1:] }}
           {%- elif parsed_event.result.command.endswith("'"): -%}
           {{ parsed_event.result.command[:-1] }}
           {%- else -%}
           {{ parsed_event.result.command }}
           {%- endif -%}

      # We should check not only for pid but also for process_keyword because some logs have pid but we don't want to set it in output
      - set:
          ecs.process.pid: '{{parsed_event.result.pid}}'
        filter: '{{
          parsed_event.result.pid != None and
           parsed_event.result.process_keyword != None
        }}'

  set_event_reason:
    actions:
      # Output should contain reason information if we have a filename, key_id, serial_number or outcome OR
      # we should have message field nonempty
      - set:
          event.reason: '{{parsed_event.result.reason}}'
        filter: '{{
           parsed_event.result.filename != None or
           parsed_event.result.key_id != None or
           parsed_event.result.serial_number != None or
           parsed_event.result.outcome != None
        }}'

      - set:
          event.reason: '{{parsed_event.result.message}}'
        filter: '{{parsed_event.message != None}}'

  set_event_category:
    # Event category is mapped based on this specification https://www.elastic.co/guide/en/ecs/8.7/ecs-allowed-values-event-type.html
    # Cannot use translate definition, because event category should be defined based on different conditions
    actions:
      - set:
          event.category: >
            {%- if parsed_event.result.pid and parsed_event.result.username and parsed_event.result.password: -%}
            {{ ["process", "session", "authentication"] }}
            {%- elif parsed_event.result.pid and parsed_event.result.connection and parsed_event.result.ssh and parsed_event.result.session: -%}
            {{ ["process", "connection", "session"] }}
            {%- elif parsed_event.result.pid and parsed_event.result.password: -%}
            {{ ["process", "authentication"] }}
            {%- elif parsed_event.result.pid and parsed_event.result.auth: -%}
            {{ ["process", "authentication"] }}
            {%- elif parsed_event.result.pid and parsed_event.result.username: -%}
            {{ ["process", "session"] }}
            {%- elif parsed_event.result.pid: -%}
            {{ ["process"] }}
            {%- elif parsed_event.result.connection_action: -%}
            {{ ["authentication"] }}
            {%- elif parsed_event.result.connection: -%}
            {{ ["connection"] }}
            {%- elif parsed_event.result.session: -%}
            {{ ["session"] }}
            {%- elif parsed_event.result.connection_source and parsed_event.result.connection : -%}
            {{ ["network"] }}
            {%- elif parsed_event.result.filename: -%}
            {{ ["file"] }}
            {%- elif parsed_event.result.action_source | lower == 'connection': -%}
            {{ ["network"] }}
            {%- else: -%}
            {{ ["process"] }}
            {%- endif -%}

  set_event_type:
    actions:
      # Event type according to this specification https://www.elastic.co/guide/en/ecs/8.7/ecs-allowed-values-event-type.html
      - set:
          event.type: >
            {%- if parsed_event.result.log_lvl | lower in ["info", "error"] -%}
            {{ [parsed_event.result.log_lvl | lower] }}
            {%- else: -%}
            {{ ["info"] }}
            {%- endif -%}
