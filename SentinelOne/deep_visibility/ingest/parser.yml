# TODO convert times from 'sinceEpoch' format to '2019-08-12T08:33:21.353000+00:00' format

name: deepvisibility
pipeline:
  - name: json_event
    external:
      name: json.parse-json
      properties:
        input_field: "{{original.message}}"
  - name: rename_meta_fields
  - name: rename_dns_fields
    filter: "{{json_event.message.dns != null}}"

stages:
  rename_meta_fields:
      actions:
      - set:
          agent.seq_id: "{{json_event.message.meta.seqId}}"
          agent.uuid: "{{json_event.message.meta.uuid}}"
          agent.trace_id: "{{json_event.message.meta.traceId}}"
          agent.version: "{{json_event.message.meta.agentVersion}}"
          agent.os.family: "{{json_event.message.meta.osFamily}}"
          agent.os.name: "{{json_event.message.meta.osName}}"
          agent.os.revision: "{{json_event.message.meta.osRevision}}"
          agent.machine.name: "{{json_event.message.meta.computerName}}"
          agent.machine.type: "{{json_event.message.meta.machineType}}"
          agent.managment_url: "{{json_event.message.meta.mgmtUrl}}"
          event.created: "{{json_event.message.timestamp.millisecondsSinceEpoch}}"

  rename_dns_fields:
      actions:
          - set:
              dns.trueContext.key: "{{json_event.message.dns.trueContext.key.value}}"
              dns.source.node.key: "{{json_event.message.dns.source.node.key.value}}"
              process.executable.node.key: "{{json_event.message.dns.source.executable.node.key.value}}"
              process.executable.start: "{{json_event.message.dns.source.executable.creationTime.millisecondsSinceEpoch}}"
              process.executable.name: "{{json_event.message.dns.source.executable.path}}"
              process.executable.is_dir: "{{json_event.message.dns.source.executable.isDir}}"
              process.executable.size_bytes: "{{json_event.message.dns.source.executable.sizeBytes}}"
              process.executable.signature.signed.identity: "{{json_event.message.dns.source.executable.signature.signed.identity}}"
              process.working_directory: "{{json_event.message.dns.source.executable.fileLocation}}"
              process.command_line: "{{json_event.message.dns.source.commandLine}}"
              process.pid: "{{json_event.message.dns.source.fullPid.pid}}"
              process.start: "{{json_event.message.dns.source.fullPid.startTime.millisecondsSinceEpoch}}"
              source.user.name: "{{json_event.message.dns.source.user.name}}"
              source.user.sid: "{{json_event.message.dns.source.user.sid}}"
              source.interactive: "{{json_event.message.dns.source.interactive}}"
              process.parent.node.key: "{{json_event.message.dns.source.parent.node.key.value}}"
              source.excluded: "{{json_event.message.dns.source.excluded}}"
              source.name: "{{json_event.message.dns.source.name}}"
              source.root: "{{json_event.message.dns.source.root}}"
              os.family: "{{json_event.message.dns.source.subsystem}}"
              source.session_id: "{{json_event.message.dns.source.sessionId}}"
              source.integrity_level: "{{json_event.message.dns.source.integrityLevel}}"
              source.is_wow64: "{{json_event.message.dns.source.isWow64}}"
              source.is_redirected_command_processor: "{{json_event.message.dns.source.isRedirectedCommandProcessor}}"
              source.trueContext.key: "{{json_event.message.dns.source.trueContext.key.value}}"
              process.counters.moduleLoad: "{{json_event.message.dns.source.counters.moduleLoad}}"
              process.counters.fileCreation: "{{json_event.message.dns.source.counters.fileCreation}}"
              process.counters.fileDeletion: "{{json_event.message.dns.source.counters.fileDeletion}}"
              process.counters.fileModification: "{{json_event.message.dns.source.counters.fileModification}}"
              process.counters.netConnOut: "{{json_event.message.dns.source.counters.netConnOut}}"
              process.counters.dnsLookups: "{{json_event.message.dns.source.counters.dnsLookups}}"
              dns.question.name: "{{json_event.message.dns.query}}"
              dns.answers.results: "{{json_event.message.dns.results}}"

# TODO when ingest will be abble to manage lists, parse dns.answers.results with grok patern as follows :
# example from intake-formats/SentinelOne/deep_visibility/tests/event_dns.json
#
#  {
#   "dns": {
#     "answers": [
#       {
#         "name": "googlehosted.l.googleusercontent.com",
#         "type": "CNAME",
#         "data": "142.250.179.65"
#       }
#     ]
#   }
# }
