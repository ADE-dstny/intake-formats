name: azure-ad
pipeline:
  - name: parsed_event
    external:
      name: json.parse-json
  - name: azuread
  - name: log_type_authentication
    filter: "{{parsed_event.message.authenticationDetails != null}}"
  - name: log_type_auditlogs
    filter: '{{ parsed_event.message.properties != null and parsed_event.message.category == "AuditLogs" }}'
  - name: log_type_auditlogs_has_message_properties
    filter: '{{ parsed_event.message.properties != null and parsed_event.message.category == "AuditLogs" }}'
  - name: log_type_risk_detection
    filter: '{{ parsed_event.message.category == "UserRiskEvents" }}'

stages:
  azuread:
    actions:
      - set:
          service.type: "ldap"
          service.name: "active directory"
          log.hostname: "azureactivedirectory"
          host.hostname: "azureactivedirectory"
          action.name: '{{parsed_event.message.operationName}}'
          user.id: '{{ parsed_event.message.userId}}'
          user.name: '{{ parsed_event.message.userPrincipalName}}'
          action.outcome: '{{parsed_event.message.properties.result}}'
          source.ip: '{{parsed_event.message.ipAddress}}'
          user_agent.original: '{{parsed_event.message.userAgent}}'
          action.type: "{{parsed_event.message.properties.operationType |lower}}"

      - set:
          action.target: "user"
        filter: "{{parsed_event.message.userId != null}}"

      - set:
          source.ip: "{{parsed_event.message.callerIpAddress}}"
        filter: "{{parsed_event.message.callerIpAddress != '<null>' and parsed_event.message.callerIpAddress != null }}"

  log_type_auditlogs_has_message_properties:
    actions:
      - set:
          action.outcome_reason: "{{parsed_event.message.properties.resultReason}}"
          event.reason: "{{parsed_event.message.properties.resultReason}}"
        filter: "{{azuread.action.outcome == 'failure'}}"
      - set:
          user.id: '{{ parsed_event.message.properties.initiatedBy.user.id}}'
          user.name: '{{ parsed_event.message.properties.initiatedBy.user.userPrincipalName}}'
          action.target: "user"
        filter: "{{parsed_event.message.properties.initiatedBy.user != null}}"

      - set:
          user.id: '{{ parsed_event.message.properties.initiatedBy.app.servicePrincipalId}}'
          user.name: '{{ parsed_event.message.properties.initiatedBy.app.displayName}}'
          action.target: "user"
        filter: "{{parsed_event.message.properties.initiatedBy.app != null}}"

  log_type_auditlogs:
    actions:
      - set:
          action.properties: >
            [
            {% for targetResource in parsed_event.message.properties.targetResources %}
            {% if targetResource.modifiedProperties != null %}
            {% for modifiedProperty in targetResource.modifiedProperties %}
            {% if modifiedProperty.displayName != "Included Updated Properties"%}
            {'name': '{{modifiedProperty.displayName or Null}}', 'newValue': '{{modifiedProperty.newValue or Null}}', 'oldValue': '{{modifiedProperty.oldValue or ""}}'},
            {% endif %}
            {% endfor %}
            {% endif %}
            {% if targetResource.type == "User" %}
            {'name': '{{targetResource.userPrincipalName | lower }}', 'id': '{{targetResource.id}}', 'type': 'targetedUser'},
            {% endif %}
            {% endfor %}
            ]
        filter: '{{parsed_event.message.properties.targetResources != [] }}'

      - set:
          action.properties: [ ]
        filter: '{{ parsed_event.message.properties.targetResources == [] }}'


  log_type_risk_detection:
    actions:
      - set:
          event.category: "authentication"
          client.geo.country_iso_code: "{{ parsed_event.message.location}}"
          client.geo.city_name: "{{ parsed_event.message.properties.location.city}}"
          client.geo.region_name: "{{ parsed_event.message.properties.location.state }}"
          client.geo.location: '{ "lon": "{{parsed_event.message.properties.location.geoCoordinates.longitude}}","lat": "{{parsed_event.message.properties.location.geoCoordinates.latitude}}" }'

      - set:
          event.type: [ "connection" ]
        filter: '{{ parsed_event.message.properties.activity == "signin" }}'

      - set:
          event.reason: '{{ parsed_event.message.properties.riskType }}'
          client.user.full_name: '{{ parsed_event.message.properties.userDisplayName }}'
          client.user.email: '{{ parsed_event.message.properties.userPrincipalName }}'
        filter: '{{ parsed_event.message.properties != null }}'

  log_type_authentication:
    actions:
      - set:
          action.name: "authentication"
          event.category: "authentication"
          event.type: [ "start" ]
          host.os.name: '{{parsed_event.message.deviceDetail.operatingSystem}}'